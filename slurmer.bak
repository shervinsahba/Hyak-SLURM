#!/bin/bash

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# slurmer 
#
# CONTENTS
# 1. INFO
# 2. DEFAULT SETTINGS [EDIT]
# 3. PROCESS COMMAND LINE VARIABLES
# 4. DEFAULT SLURM COMMAND [EDIT]
# 5. SLURMER PROGRAM
# 6. RUN SLURMER
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# 1. INFO
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

versioninfo="Version: slurmer v1.1
Updated: 20191104
Repo:    https://github.com/shervinsahba/
Contact: Shervin Sahba, ssahba@uw.edu
"

usageinfo="Slurmer is a job and batch facilitator, designed with UW Hyak in mind. 
It generates a SLURM batch file, log it, queues the job, and logs output.

usage: $(basename "$0") [-h | --help] [-v | --version] [-D | --dryrun] [-s | --settings]
                [-n number_of_nodes] [-N tasks_per_node] [-m node_memory]  
                [-t walltime] [-d working_dir] [-j set_jobname]
                [job command] [optional pre-command 1] [optional pre-command 2]
"

helpinfo="$usageinfo
example: To run a python script in a specific environment with jobname "example":
   slurmer -j 'example' 'python /pathtofile/file.py' 'source activate envname'

Note that the optional pre-commands run before the submitting the job. 


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
OPTION FLAG DETAILS

IMPORTANT:  Default values should be set by directly editting
the slurmer script. Code annotated with [EDIT] may be of 
interest to users. Config suggestions...
   + Modify SLURM USER INFO to match email, 
     account, and partition.
   + Modify SLURM COMMAND to match your sbatch usage.
   + Modify SLURM variable defaults to quickly run jobs.
   + Review the generated SLURM Script.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

SLURM variables
   -n [integer]        number of nodes
   -N [integer]        number of tasks per node
   -t H:MM:SS          walltime
   -m [integer]G       memory (e.g. Mox Hyak, 128G node is 120G max, 256=248, 512=500)

Job variables
   -d /path/           working directory
   -j jobname          jobname	

User settings
   -A account          account
   -p partition        partition
   -E email@host.xxx   email address for job notifications
"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# 2. DEFAULT SETTINGS [EDIT]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# I recommend you edit this file to set your desired defaults.

# SLURM USER INFO
EMAIL=af
ACCOUNT=a
PARTITION=ga

# SLURM variable defaults
# These options can be modified via command line flags.
nodes=ga
ntasks=ga
walltime=ga
memory=g
workdir=ag
jobname=

# Other. No need to edit these.
TIMESTAMP=`date '+%Y%m%dT%H%M%S'`	# timestamp in YYYYMMDDTHHMMSS format
DRYRUN=false                        # dry run the slurm job

display_default_settings(){
	printf "Default Settings:
	EMAIL     $EMAIL
	ACCOUNT   $ACCOUNT
	PARTITION $PARTITION
	nodes     $nodes
	ntasks    $ntasks
	walltime  $walltime
	memory    $memory
	workdir   $workdir
	jobname   $jobname
	"
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# 3. PROCESS COMMAND LINE VARIABLES
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

# If no options given, display usage
if [ $# -eq 0 ] ; then 
	printf "$usageinfo"
	exit 1
fi

# Transform long options to short ones
for arg in "$@"; do
  shift
  case "$arg" in
    "--help")     set -- "$@" "-h" ;;
    "--version")  set -- "$@" "-v" ;;
    "--settings") set -- "$@" "-s" ;;
	"--dryrun")   set -- "$@" "-D" ;;
    *)            set -- "$@" "$arg"
  esac
done

# Process short option flags
OPTIND=1
while getopts ':n:N:t:m:d:j:A:p:E:hvsD' flag; do
   case "${flag}" in
   	  h) printf "$helpinfo" 
         exit 0 ;;
   	  v) printf "$versioninfo" 
         exit 0 ;;
      s) display_default_settings 
         exit 0 ;;
      n) nodes=${OPTARG} ;;
      N) ntasks=${OPTARG} ;;
      t) walltime=${OPTARG} ;;
	  m) memory=${OPTARG} ;;
      d) workdir=${OPTARG} ;;
	  j) jobname=${OPTARG} ;;
	  A) ACCOUNT=${OPTARG} ;;
      p) PARTITION=${OPTARG} ;;
      E) EMAIL=${OPTARG} ;;
	  D) DRYRUN=true;;
      *) "Unexpected option ${flag}" 
         exit 1 ;;
   esac
done
shift "$((OPTIND-1))"    #purge option flags


# Retrieve slurmer command line variables
cmd=$1		# Required! This is the job you want to run.
opt1=$2		# Optional command 1 runs before your job.
opt2=$3		# Optional command 2 runs before your job.


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# 4. DEFAULT SLURM COMMAND [EDIT]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# Default slurm command. Probably fine for UW Hyak users. 
# Change if you use a different cluster or need other options.

SLURMCMD="/usr/bin/sbatch -p $PARTITION -A $ACCOUNT"


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# 5. SLURMER PROGRAM
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# Main functions for slurmer program

generate_slurm(){

tf=`mktemp /tmp/$TIMESTAMP-$jobname.XXXXXX` # create tempfile

# Slurm script generated using content between EOF markers
cat > $tf << EOF		
#!/bin/bash
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#   SLURM Script - [EDIT]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

## Main SLURM variables
#SBATCH --job-name=$jobname
#SBATCH --account=$ACCOUNT
#SBATCH --partition=$PARTITION
#SBATCH --nodes=$nodes
#SBATCH --ntasks-per-node=$ntasks
#SBATCH --time=$walltime
#SBATCH --mem=$memory
#SBATCH --chdir=$workdir

## Email notification
#SBATCH --mail-type=ALL
#SBATCH --mail-user=$EMAIL

## Export all your environment variables to the batch job session
#SBATCH --export=all

## Output important run info
pwd; hostname; date --iso-8601=seconds
echo "Option1: $opt1"
echo "Option2: $opt2"
echo "Command: $cmd"

## Export your .bashrc settings
source $HOME/.bashrc

## Run job and time it
$opt1
$opt2
(time $cmd | tee $workdir/$TIMESTAMP-$jobname.out)


date --iso-8601=seconds


EOF
}


dry_run(){
	cp $tf logs/$TIMESTAMP-$jobname.SLURM
	cat $tf
	rm -f $tf
	printf "Dry run generated for $jobname. Slurm file in logs.\n"	
	exit 0
}


log_slurm(){
	mkdir -p logs	# create logs dir in working directory

	# create timestamped header
	HLINE=`printf '%50s\n' | tr ' ' -`	# horizontal dash line
	echo "$HLINE 
	$TIMESTAMP
	$HLINE" >> logs/submit_log	 

	cat $tf >> logs/submit_log 	 # log the batch file
}


execute_slurm(){
	($SLURMCMD $tf >> logs/submit_log )	# execute & log script
	rm -f $tf                           # purge SLURM script
	printf "$jobname - job slurmed up.\n"	
}



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# 6. RUN SLURMER
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

generate_slurm
if "$DRYRUN"; then dry_run; fi
log_slurm
execute_slurm
